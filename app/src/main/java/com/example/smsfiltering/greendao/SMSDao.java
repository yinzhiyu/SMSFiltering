package com.example.smsfiltering.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.smsfiltering.table.SMS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMS".
*/
public class SMSDao extends AbstractDao<SMS, Void> {

    public static final String TABLENAME = "SMS";

    /**
     * Properties of entity SMS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Sender = new Property(1, String.class, "sender", false, "SENDER");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property ReadType = new Property(4, int.class, "readType", false, "READ_TYPE");
        public final static Property UsefulType = new Property(5, int.class, "usefulType", false, "USEFUL_TYPE");
    }


    public SMSDao(DaoConfig config) {
        super(config);
    }
    
    public SMSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMS\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"SENDER\" TEXT," + // 1: sender
                "\"CONTENT\" TEXT," + // 2: content
                "\"TIME\" TEXT," + // 3: time
                "\"READ_TYPE\" INTEGER NOT NULL ," + // 4: readType
                "\"USEFUL_TYPE\" INTEGER NOT NULL );"); // 5: usefulType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SMS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(2, sender);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
        stmt.bindLong(5, entity.getReadType());
        stmt.bindLong(6, entity.getUsefulType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SMS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sender = entity.getSender();
        if (sender != null) {
            stmt.bindString(2, sender);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
        stmt.bindLong(5, entity.getReadType());
        stmt.bindLong(6, entity.getUsefulType());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SMS readEntity(Cursor cursor, int offset) {
        SMS entity = new SMS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sender
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.getInt(offset + 4), // readType
            cursor.getInt(offset + 5) // usefulType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SMS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSender(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReadType(cursor.getInt(offset + 4));
        entity.setUsefulType(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SMS entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SMS entity) {
        return null;
    }

    @Override
    public boolean hasKey(SMS entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
